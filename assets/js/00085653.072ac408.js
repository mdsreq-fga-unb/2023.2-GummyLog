"use strict";(self.webpackChunkgummy_store_docs=self.webpackChunkgummy_store_docs||[]).push([[674],{3905:(e,o,n)=>{n.d(o,{Zo:()=>l,kt:()=>g});var a=n(7294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function t(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?t(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function d(e,o){if(null==e)return{};var n,a,r=function(e,o){if(null==e)return{};var n,a,r={},t=Object.keys(e);for(a=0;a<t.length;a++)n=t[a],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(a=0;a<t.length;a++)n=t[a],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var o=a.useContext(s),n=o;return e&&(n="function"==typeof e?e(o):i(i({},o),e)),n},l=function(e){var o=c(e.components);return a.createElement(s.Provider,{value:o},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},p=a.forwardRef((function(e,o){var n=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=c(n),p=r,g=u["".concat(s,".").concat(p)]||u[p]||m[p]||t;return n?a.createElement(g,i(i({ref:o},l),{},{components:n})):a.createElement(g,i({ref:o},l))}));function g(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var t=n.length,i=new Array(t);i[0]=p;var d={};for(var s in o)hasOwnProperty.call(o,s)&&(d[s]=o[s]);d.originalType=e,d[u]="string"==typeof e?e:r,i[1]=d;for(var c=2;c<t;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3315:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const t={title:"Integra\xe7\xe3o cont\xednua e Branch Strategy",sidebar_position:4},i="Integra\xe7\xe3o Cont\xednua e Branch Strategy",d={unversionedId:"Sobre o produto/integracaoContinua",id:"Sobre o produto/integracaoContinua",title:"Integra\xe7\xe3o cont\xednua e Branch Strategy",description:"Branch Strategy",source:"@site/docs/Sobre o produto/integracaoContinua.md",sourceDirName:"Sobre o produto",slug:"/Sobre o produto/integracaoContinua",permalink:"/2023.2-GummyLog/Sobre o produto/integracaoContinua",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Sobre o produto/integracaoContinua.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Integra\xe7\xe3o cont\xednua e Branch Strategy",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Arquitetura do Produto",permalink:"/2023.2-GummyLog/Sobre o produto/arquitetura"},next:{title:"C4 Model",permalink:"/2023.2-GummyLog/C4Model"}},s={},c=[{value:"Branch Strategy",id:"branch-strategy",level:2},{value:"Integra\xe7\xe3o Cont\xednua",id:"integra\xe7\xe3o-cont\xednua",level:2},{value:"Documenta\xe7\xe3o",id:"documenta\xe7\xe3o",level:3},{value:"Back-end",id:"back-end",level:3},{value:"Front-end",id:"front-end",level:3},{value:"Banco de dados",id:"banco-de-dados",level:3}],l={toc:c},u="wrapper";function m(e){let{components:o,...n}=e;return(0,r.kt)(u,(0,a.Z)({},l,n,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"integra\xe7\xe3o-cont\xednua-e-branch-strategy"},"Integra\xe7\xe3o Cont\xednua e Branch Strategy"),(0,r.kt)("h2",{id:"branch-strategy"},"Branch Strategy"),(0,r.kt)("p",null,"Teremos 8 tipos de branches:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"main"),": Branch principal do reposit\xf3rio, em que ficar\xe1 hospedado o c\xf3digo raw da documenta\xe7\xe3o"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"back-live"),": branch em que ficar\xe1 hospedado o c\xf3digo raw do back-end"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"front-live"),": branch em que ficar\xe1 hospedado o c\xf3digo raw do front-end"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"gh-pages"),": branch usada pelo github para servir a build da documenta\xe7\xe3o"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Release/Unidade","[N\xfamero da \xfanidade]","/Destino (back/front/pages)"),": Branch em que iremos realizar testes antes de todos os deploys"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Feature/","[Refer\xeancia do item no backlog]"),": Branch em que ser\xe3o desenvolvidas hist\xf3rias de usu\xe1rio"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Issue/#","[N\xfamero da Issue]"),": Branch em que as Issues ser\xe3o resolvidas"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Fix/","[Refer\xeancia do item no backlog]"),": Branch em que ser\xe3o desenvolvidos fixes no c\xf3digo")),(0,r.kt)("mermaid",{value:'\ngitGraph\n    commit\n    branch back-live\n    branch front-live\n    branch gh-pages\n    branch "Release/Unidade2/pages"\n    checkout "Release/Unidade2/pages"\n    commit\n    branch "Feature/[E1-US2]"\n    commit\n    commit\n    commit\n    checkout "Release/Unidade2/pages"\n    merge "Feature/[E1-US2]"\n    checkout main\n    merge "Release/Unidade2/pages"\n    commit\n    checkout gh-pages\n    merge main\n    checkout back-live\n    commit\n    branch Release/Unidade2/back\n    commit\n    branch "Fix/[E1-US2]"\n    commit\n    commit\n    commit\n    checkout Release/Unidade2/back\n    merge "Fix/[E1-US2]"\n    checkout back-live\n    merge Release/Unidade2/back\n    checkout front-live\n    commit\n    branch Release/Unidade2/front\n    commit\n    branch "Issue/#23"\n    commit\n    commit\n    commit\n    checkout Release/Unidade2/front\n    merge "Issue/#23"\n    checkout front-live\n    merge Release/Unidade2/front\n    '}),(0,r.kt)("h2",{id:"integra\xe7\xe3o-cont\xednua"},"Integra\xe7\xe3o Cont\xednua"),(0,r.kt)("h3",{id:"documenta\xe7\xe3o"},"Documenta\xe7\xe3o"),(0,r.kt)("p",null,'Nossa documenta\xe7\xe3o \xe9 feita usando o Docussaurus, que realiza uma build e serve ela para o github pages por meio do github Actions. Sempre que uma branch com nome iniciado em "Release" \xe9 criada, ela passa a ser assistida pelo github actions, que roda uma s\xe9rie de jobs de testes para estabelecer se a branch de Release est\xe1 apta ou n\xe3o para ir para produ\xe7\xe3o sempre que um commit for feito na branch. Sempre que um commit for feito na branch main, o github Actions roda o job de build e serve que ir\xe1 disponibilizar a build no github pages por meio da branch gh-pages.'),(0,r.kt)("h3",{id:"back-end"},"Back-end"),(0,r.kt)("p",null,"Nosso back-end \xe9 feito com o ExpressJS e ser\xe1 hospedado no Render - um servi\xe7o de hospedagem de servi\xe7os web - e o ambiente de produ\xe7\xe3o ficar\xe1 localizado na branch back-live, que ser\xe1 assistida pelo Render. Sempre que um commit por feito para a banch assistida ele ir\xe1 rodar os jobs que ir\xe3o buildar e servir o servi\xe7o na plataforma."),(0,r.kt)("h3",{id:"front-end"},"Front-end"),(0,r.kt)("p",null,"Nosso front-end \xe9 feito com ReactJS e ser\xe1 hospedado no Vercel - um servi\xe7o de hospedagem similar ao Render, mas com foco maior em front-end - e o ambiente de produ\xe7\xe3o ficar\xe1 localizado na branch front-live, que, da mesma forma, ser\xe1 assistida pelo servi\xe7o respons\xe1vel (Vercel). Da mesma forma, sempre que um commit for feito para o ambiente de produ\xe7\xe3o ele ir\xe1 rodar os jobs respons\xe1veis por buildar e servir a p\xe1gina."),(0,r.kt)("h3",{id:"banco-de-dados"},"Banco de dados"),(0,r.kt)("p",null,"Nosso banco de dados ficar\xe1 hospedado no Render, as migrations ser\xe3o feitas manualmente por n\xe3o ser poss\xedvel capacitar todo o time a usar ORMs para automa\xe7\xe3o dessa tarefa."),(0,r.kt)("mermaid",{value:'C4Deployment\ntitle GummyLog Deploy\n\nDeployment_Node(comp, "Computador", "Microsoft Windows, Apple macOS ou Ubuntu"){\n        Deployment_Node(browser, "Web Browser", "Google Chrome, Mozilla Firefox,<br/> Apple Safari ou Microsoft Edge"){\n            Container(spa, "Single Page Application", "JavaScript e React", "Fornece os servi\xe7os do GummyLog para o cliente por meio do navegador")\n        }\n}\n\nDeployment_Node(gh-pages-site, "GitHub Pages"){\n    Container(doc, "P\xe1gina da documenta\xe7\xe3o")\n}\n\nDeployment_Node(Vercel, "Vercel", "Servi\xe7o de hospedagem do front-end"){\n    Deployment_Node(u3, "Ubuntu", "Sistema operacional em que o servidor opera"){\n        Container(front, "Front-End")\n    }\n}\n\nDeployment_Node(Render, "Render", "Servi\xe7o de hospedagem do back-end e banco de dados"){\n    Deployment_Node(u1, "Ubuntu", "Sistema operacional em que o servidor opera"){\n        Container(server, "Back-End")\n    }\n    Deployment_Node(u2, "Ubuntu", "Sistema operacional em que o servidor opera"){\n        Container(db, "PostgreSQL")\n    }\n}\n\nDeployment_Node(gh, "GitHub", "Servi\xe7o de hospedagem de reposit\xf3rios git"){\n    Deployment_Node(repo, "mdsreq-fga-unb/2023.2-GummyLog", "Reposit\xf3rio do projeto"){\n        Container(main, "main", "Branch contendo o <br/>c\xf3digo com a documenta\xe7\xe3o")\n        Container(gh-pages, "gh-pages", "Branch que cont\xe9m a <br/> build da documenta\xe7\xe3o")\n        Container(back-live, "back-live", "Branch que cont\xe9m o <br> c\xf3digo do back-end")\n        Container(front-live, "front-live", "Branch que cont\xe9m o <br> c\xf3digo do front-end")\n        Deployment_Node(actions, "GitHub Actions"){\n            Container(deploytogh, "Deploy to Github Pages")\n        }\n    }\n}\n\nRel(main, deploytogh, "Ao receber um commit ativa o job")\nUpdateRelStyle(main, deploytogh, $lineColor="red", $textColor="red")\nRel(deploytogh, gh-pages, "Realiza a build, e armazena na branch")\nUpdateRelStyle(deploytogh, gh-pages, $lineColor="indigo", $textColor="indigo")\nRel(gh-pages, doc, "Serve o conte\xfado da Build")\nUpdateRelStyle(gh-pages, doc, $lineColor="blue", $textColor="blue", $offsetY="-300")\n\nRel(back-live, server, "Build para")\nRel(front-live, front, "Build para")\n\nRel(front, server, "Consome")\nRel(server, db, "Consome")\nRel(front, spa, "Apresenta")\nRel(doc, spa, "Apresenta")'}))}m.isMDXComponent=!0}}]);