"use strict";(self.webpackChunkgummy_store_docs=self.webpackChunkgummy_store_docs||[]).push([[243],{3905:(e,o,r)=>{r.d(o,{Zo:()=>l,kt:()=>f});var a=r(7294);function t(e,o,r){return o in e?Object.defineProperty(e,o,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[o]=r,e}function s(e,o){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),r.push.apply(r,a)}return r}function n(e){for(var o=1;o<arguments.length;o++){var r=null!=arguments[o]?arguments[o]:{};o%2?s(Object(r),!0).forEach((function(o){t(e,o,r[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(r,o))}))}return e}function i(e,o){if(null==e)return{};var r,a,t=function(e,o){if(null==e)return{};var r,a,t={},s=Object.keys(e);for(a=0;a<s.length;a++)r=s[a],o.indexOf(r)>=0||(t[r]=e[r]);return t}(e,o);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)r=s[a],o.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var d=a.createContext({}),u=function(e){var o=a.useContext(d),r=o;return e&&(r="function"==typeof e?e(o):n(n({},o),e)),r},l=function(e){var o=u(e.components);return a.createElement(d.Provider,{value:o},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},p=a.forwardRef((function(e,o){var r=e.components,t=e.mdxType,s=e.originalType,d=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=u(r),p=t,f=c["".concat(d,".").concat(p)]||c[p]||m[p]||s;return r?a.createElement(f,n(n({ref:o},l),{},{components:r})):a.createElement(f,n({ref:o},l))}));function f(e,o){var r=arguments,t=o&&o.mdxType;if("string"==typeof e||t){var s=r.length,n=new Array(s);n[0]=p;var i={};for(var d in o)hasOwnProperty.call(o,d)&&(i[d]=o[d]);i.originalType=e,i[c]="string"==typeof e?e:t,n[1]=i;for(var u=2;u<s;u++)n[u]=r[u];return a.createElement.apply(null,n)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4588:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>d,contentTitle:()=>n,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=r(7462),t=(r(7294),r(3905));const s={title:"Arquitetura do Produto",sidebar_position:3},n="Arquitetura do produto",i={unversionedId:"Sobre o produto/arquitetura",id:"Sobre o produto/arquitetura",title:"Arquitetura do Produto",description:"A arquitetura Cliente-server \xe9 composta por dois componentes, o fornecedor, o qual se encarrega de prover os servi\xe7os e o consumidor, o qual usa os servi\xe7os.",source:"@site/docs/Sobre o produto/arquitetura.md",sourceDirName:"Sobre o produto",slug:"/Sobre o produto/arquitetura",permalink:"/2023.2-GummyLog/Sobre o produto/arquitetura",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Sobre o produto/arquitetura.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Arquitetura do Produto",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Processos de Desenvolvimento de Software",permalink:"/2023.2-GummyLog/Sobre o produto/processoDeDev"},next:{title:"Integra\xe7\xe3o cont\xednua e Branch Strategy",permalink:"/2023.2-GummyLog/Sobre o produto/integracaoCont"}},d={},u=[{value:"Consist\xeancia dos dados:",id:"consist\xeancia-dos-dados",level:2},{value:"Compartilhamento:",id:"compartilhamento",level:2},{value:"Requests:",id:"requests",level:2},{value:"Escalabilidade:",id:"escalabilidade",level:2},{value:"Funcionalidade:",id:"funcionalidade",level:2}],l={toc:u},c="wrapper";function m(e){let{components:o,...r}=e;return(0,t.kt)(c,(0,a.Z)({},l,r,{components:o,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"arquitetura-do-produto"},"Arquitetura do produto"),(0,t.kt)("p",null,"A arquitetura Cliente-server \xe9 composta por dois componentes, o fornecedor, o qual se encarrega de prover os servi\xe7os e o consumidor, o qual usa os servi\xe7os."),(0,t.kt)("p",null,"Nesta arquitetura podem existir v\xe1rios clientes conectados a um \xfanico servidor para recuperar os recursos necess\xe1rios para funcionar."),(0,t.kt)("p",null,"O cliente neste caso \xe9 apenas uma camada para mostrar os dados, \xe9 o servidor que faz todas as tarefas pesadas, por\xe9m ambas as partes s\xe3o igualmente importantes, o cliente \xe9 completamente inutil se o servidor n\xe3o estiver dispon\xedvel e o servidor sozinho n\xe3o poderia ser usado. "),(0,t.kt)("p",null,"A arquitetura Client-server no caso do GummyLog funciona da seguinte maneira o usu\xe1rio, neste caso um membro do GummyStore, realiza um pedido atrav\xe9s de uma interface no ReactJS, depois desta interface envia solicita\xe7\xf5es ao sistema de back-end que usa ExpressJS, este se encarregar\xe1 de conectar a parte de front-end com o servidor SQL, posteriormente se envia as querendo ao servidor que responde com dados, logo a parte de back-end envia estes dados \xe0 parte front-end para que o usu\xe1rio possa visualiz\xe1-los."),(0,t.kt)("h1",{id:"justificativa"},"Justificativa"),(0,t.kt)("p",null,"Este modelo foi escolhido de entre muitos outros, j\xe1 que se alinha melhor \xe0s necessidades do programa, em formas que se descrever\xe3o a seguir."),(0,t.kt)("h2",{id:"consist\xeancia-dos-dados"},"Consist\xeancia dos dados:"),(0,t.kt)("p",null,"Porque a informa\xe7\xe3o reflete o estoque f\xedsico de produtos e as ordens recebidas n\xe3o podem ser perdidas uma vez que o programa \xe9 fechado, existem muitas maneiras de fazer isso, mas n\xf3s escolhemos o modelo cliente-servidor, que seria um servidor central, isto \xe9 bem-vindo com os benef\xedcios de ter a data centralizada, pelo que \xe9 mais f\xe1cil assegur\xe1-la e prover autoriza\xe7\xf5es a usu\xe1rios."),(0,t.kt)("h2",{id:"compartilhamento"},"Compartilhamento:"),(0,t.kt)("p",null,"Atualmente existem 2 membros na equipe de GummyStore, estes 2 precisar\xe3o ter acesso aos dados em lugares distantes e em computadores separados, n\xe3o somente computadores mas tamb\xe9m podem ser telefones celulares, para garantir o acesso aos dados independentemente do local e do dispositivo utilizado ser\xe1 utilizado o servidor centralizado da arquitetura Client-Server para lidar com os dados."),(0,t.kt)("h2",{id:"requests"},"Requests:"),(0,t.kt)("p",null,"A maioria das funcionalidades da aplica\xe7\xe3o s\xe3o de modifica\xe7\xe3o, leitura e elimina\xe7\xe3o de dados coisas nas quais a arquitetura Client-Server destaca-se."),(0,t.kt)("h2",{id:"escalabilidade"},"Escalabilidade:"),(0,t.kt)("p",null,"GummyStore pretende expandir-se no futuro, por isso \xe9 necess\xe1rio autenticar mais usu\xe1rios e armazenar mais produtos, em uma arquitetura onde toda essa informa\xe7\xe3o \xe9 centralizada \xe9 muito mais f\xe1cil realizar as mudan\xe7as necess\xe1rios."),(0,t.kt)("h2",{id:"funcionalidade"},"Funcionalidade:"),(0,t.kt)("p",null,"Permite buscas com filtros mais detalhados para retornar apenas os dados necess\xe1rios a serem mostrados para o usu\xe1rio. Deste modo, em momento algum client side ter\xe1 que renderizar uma tabela inteira ou ter que aplicar filtros do seu lado, reduzindo a complexidade algor\xedtmica do seu lado e exigindo menos poder computacional."),(0,t.kt)("mermaid",{value:'C4Context\ntitle Contexto da Arquitetura do MVP1\n\nEnterprise_Boundary(g0, "GummyStore") {\n    Person(Partner, "S\xf3cio", "Um dos donos da GummyStore")\n\n    System_Boundary(g1, "GummyLog") {\n        System(SystemB, "ReactJS", "Interface de usu\xe1rio")\n        System(SystemA, "ExpressJS", "Servidor back-end que recebe e responde requisi\xe7\xf5es e <br/> aplica regras de neg\xf3cio")\n    }\n    SystemDb_Ext(DB, "PostgreSQL", "Banco de dados que armazena informa\xe7\xf5es de SKUs")\n\n    Rel(Partner, SystemB, "Realiza solicita\xe7\xf5es de adi\xe7\xe3o, remo\xe7\xe3o, <br/> reabastecimento e apagar SKUs")\n    UpdateRelStyle(Partner, SystemB, $lineColor="red", $textColor="red", $offsetX="-235", $offsetY="-50")\n    \n    Rel(SystemB, SystemA, "Envia a solicita\xe7\xe3o para o <br/> back-end aplicar as regras de neg\xf3cio")\n    UpdateRelStyle(SystemB, SystemA, $lineColor="red", $textColor="red", $offsetY="40", $offsetX="-80",)\n    \n    Rel(SystemA, DB, "Envia as queries para alterar <br/> os dados no banco")\n    UpdateRelStyle(SystemA, DB, $lineColor="red", $textColor="red", $offsetX="15")\n    \n    Rel(DB, SystemA, "Envia dados para o back-end <br/> como resposta \xe0s queries")\n    UpdateRelStyle(DB, SystemA, $lineColor="blue", $textColor="blue", $offsetX="-170")\n\n    Rel(SystemA, SystemB, "Envia a resposta <br/> das solicita\xe7\xf5es <br/> do front-end")\n    UpdateRelStyle(SystemA, SystemB, $lineColor="blue", $textColor="blue", $offsetY="-35", $offsetX="-45")\n\n    Rel(SystemB, Partner, "Envia a resposta das <br/> solicita\xe7\xf5es do usu\xe1rio")\n    UpdateRelStyle(SystemB, Partner, $lineColor="blue", $textColor="blue", $offsetY="-50", $offsetX="10")\n}\n'}))}m.isMDXComponent=!0}}]);